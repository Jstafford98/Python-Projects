#This program allows the user to simulate the rolling of n die. 
#Author: Jordan Stafford

#Import Statements
import random as ran,os,sys
from termcolor import colored

#This list will store all rolls and be used in the getRollReport function
rolls = []

#Clears the terminal using Linux-based commands
clear = lambda: os.system('clear')

#Main Function
def main():
  #Clear the terminal
  clear()
  #Set total number of dice to roll and display header
  print("     Welcome to the dice simulator!")
  n_die = int(input("How many die would you like to simulate rolling?"))
  #Print n die 
  for i in range(n_die):
    rolls.append(roll())
  rollMenu()

#This function returns a random integer from 1 to 6
def roll():
  return ran.randint(1,6)

#This function prints a single die to the console based on the parameter. Unused at this time. 
def printDie(val):
  print("+ - - - - - +\n             \n|           |\n             \n|    ",val,"    |\n             \n|           |\n             \n+ - - - - - +")
  
#This function generates a menu prompt
def rollMenu():
  #Clear the terminal
  clear()
  #Display menu prompt
  print("=========================================")
  print("Rolls are complete. Choose a menu option.")
  print("      (1) View Individual Rolls          ")
  print("      (2)    View Statistics             ")
  print("      (3)        Rerun                   ")
  print("      (4)        Exit                    ")
  print("=========================================")
  sel = int(input())
  #Boolean flag that will control the main menu loop until an exit case occurs
  selIsNotValid = True
  #Main Menu Loop. See Functions for more documentation regarding their purpose. 
  while (selIsNotValid):
    if sel == 1:
      viewRolls()
    elif sel == 2:
      viewReport()
    elif sel == 3:
      main()
    elif sel == 4:
      sys.exit("Exiting. . .")
    else:
      print(colored("Invalid Selection. Please choose an appropriate menu option.",'red'))

#This function prints all rolls generated by the program. The rolls are stored in the "rolls" list
def viewRolls():
  #Clear the terminal
  clear()
  #Print each roll in the list
  for j in range(len(rolls)):
    print("Roll #",j+1,":",rolls[j])
  #Wait for input to allow the user to analyze results
  input("Press any key to continue. . .")
  #Return to main menu
  rollMenu()

#This function generates a formatted report showing the total rolls made and the percentage of each result
def viewReport():
  #Clear the terminal
  clear()
  #Generate a dictionary using the calcStats functoin. The dictionary contains 6 counters that represent each possible side of a die. 
  dic = calcStats()
  #Print the header and use a for loop to print the results
  print("Total Dice Rolled:", len(rolls))
  print("Number | Occurances | Percentage")
  print("================================")
  for i in range(1,7,1):
    print(str(i).center(7,' '), str(dic[i]).center(12,' '),"{}%".format(str("{0:.1f}".format(dic[i]/len(rolls) * 100))).center(11,' '))
  #Wait for input to allow the user to analyze the results
  input("Press any key to continue. . .")
  #Return to main menu
  rollMenu()

#This function returns a ditionary with the total instances of each possible result on a die
def calcStats():
  #Instance Vars
  one,two,three,four,five,six = 0,0,0,0,0,0
  #Number dictionary. This contains counters that represent each side of a die. 
  nums = {
    1: one,
    2: two,
    3: three,
    4: four,
    5: five,
    6: six
  }
  #Iterate through rolls list and increment respective dictionary values
  for x in rolls:
    nums[x] = nums.get(x) + 1 
  return nums

#Main function call
main()
